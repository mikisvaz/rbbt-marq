require 'MARQ'
require 'MARQ/main'
require 'MARQ/GEO'
require 'MARQ/ID'
require 'yaml'
require 'progress-monitor'
require 'MARQ/MADB'
require 'rbbt/sources/organism'

$platform       ||= ENV['platform']
$org            ||= [$organism, ENV['organism'], nil].compact.first 
$dataset        ||= ENV['dataset']

$expr_threshold ||= (ENV['threshold'] || 0.05).to_f
$folds          ||= (ENV['folds'] || 2.5).to_f
$nth_genes      ||= (ENV['nth_genes'] || 100).to_i

$force       = [$force, ENV['force'], false].compact.first 
$tranlations = [$tranlations, ENV['translations'], false].compact.first 
$series      = [$series, ENV['series'], true].compact.first 
$update_db   = [$update_db, ENV['update_db'], false].compact.first 
$skip_db     = [$skip_db, ENV['skip_db'], false].compact.first 
$fdr         = [$fdr, ENV['fdr'], true].compact.first 
$do_folds    = [$do_folds, ENV['do_folds'], true].compact.first 


# Record changes in order to update DB
$changes = false
module GEO::Process::R
  class << self
    alias_method :GDS_old, :GDS
    def GDS(*args)
      $changes = true
      GDS_old(*args)
    end
  
    alias_method :GSE_old, :GSE
    def GSE(*args)
      $changes = true
      GSE_old(*args)
    end
  end
end


def process_list
  return {GEO::Remote::dataset_platform($dataset) => [$dataset]} if $dataset
  return {$platform => GEO::Remote::platform_datasets($platform)} if $platform
  
  if $organism
    organisms = [$organism]
  else
    organisms = Organism.all(true)
  end

  list = {}
  organisms.each{|organism|
    GEO::Remote::organism_platforms(organism).each{|platform|
      datasets = GEO::Remote::platform_datasets(platform)

      # Platforms with no datasets are skiped, although if they have series
      # they may be considered later
      next if datasets.empty?

      if $tranlations || $update_db
        list[platform] = []
      else
        if ! $force
          datasets.reject!{|dataset| Dir.glob(File.join(GEO.dataset_path(dataset, platform), '.*')).any? }
        end
        list[platform] = datasets
      end
    }
  }

  if $series && ! $translations 
    series = Dir.glob('series/*.yaml').collect{|f| File.basename(f).sub(/.yaml/,'')}               
    series.each{|serie|
      platform = GEO::Remote::dataset_platform(serie)
      if organisms.include? GEO::SOFT::GPL(platform)[:organism].to_s
        list[platform] ||= []
        list[platform] << serie
      end
    }
  end

  return list
end

desc "Analyze datasets"
task 'data' do 

  updated_platforms = []

  process_list.each{|platform, datasets|

    # Prepare the platform
    GEO::Process.GPL(platform)

    # Process all datasets
    datasets.each{|dataset|
      begin
        $changes = false
        if dataset =~ /GDS/
          GEO::Process.GDS(dataset, platform)
        else
          info = YAML::load(File.open("series/#{ serie }.yaml"))
          FileUtils.rm("platforms/#{ info[:platform] }.skip") if File.exist?  "platforms/#{ info[:platform] }.skip"
          GEO::Process.GSE(dataset, platform)
        end

        # Mark the platform for saving in DB
        updated_platforms << platform if $changes || ($force && $update_db)
      rescue
        puts "Error processing dataset #{ dataset }:"
        puts $!.message
        puts $!.backtrace.join("\n")
      end
    }
  }

  platforms_to_save.each{|platform|
    begin
      MADB::GEO.saveGPL(platform) 
    rescue
      puts "Error saving platform #{ platform }"
      puts $!.message
      puts $!.backtrace.join("\n")
    end
  }
end

def annotations(name, cross_platform = false, &block)
  FileUtils.mkdir_p File.join("annotations", name) unless File.exist? File.join("annotations", name)
  platforms = Dir.glob('platforms/*.yaml').collect{|f| File.basename(f).sub(/.yaml/,'')}
  platforms = platforms.sort_by{|platform| MARQ.platform_organism(platform)}.reverse

  if $platform
    platforms = [$platform]
  end

  Progress.monitor("Annotating with #{ name }")
  platforms.each{|platform|
    Progress.monitor("Annotating with #{ name }: platform #{ platform }")
    GEO.platform_datasets(platform).each do |dataset|
      begin
        next if File.exist? File.join("annotations", name, dataset)
        filename = File.join("annotations", name, dataset)
        dataset += '_cross_platform' if cross_platform && GEO.has_cross_platform?(nil, platform)
        next if File.exist? GEO.dataset_path(dataset) + '.skip'
        terms = block.call(dataset)
        Open.write(filename, terms.to_yaml)
      rescue Exception
        puts $!.message
      end
    end
  }
  return if $platform

  Progress.monitor("Annotating with #{ name }, series")
  series = Dir.glob('series/*.yaml').collect{|f| File.basename(f).sub(/.yaml/,'')}
  series.each{|serie|
    begin
      next if File.exist? File.join("annotations", name, serie)
      filename = File.join("annotations", name, serie)
      serie += '_cross_platform' if cross_platform && GEO.has_cross_platform?(serie)
      next if File.exist? GEO.dataset_path(serie) + '.skip'
      terms = block.call(serie)
      Open.write(filename, terms.to_yaml)
    rescue Exception
      puts $!.message
    end
  }
end

def goterms(org, list, slim, threshold)
  return [] if list.empty?
  results = Annotations::GO::Genecodis::Local.analysis(org, list, slim)
  results.
    select{|info| info[:s].to_i  > 2 }.
    select{|info| info[:hyp_c].to_f < threshold }.
    collect{|info| info[:items]}.collect{|id| GO::id2name(id)}
end



task 'annotate_Words' do
  require 'MARQ/annotations'
  require 'rbbt/bow/bow'
  annotations('Words'){|dataset|
    terms = {}
    description = Open.read(GEO.dataset_path(dataset) + '.description')
    terms[:dataset] = [dataset] +  description.words.uniq
    Open.read(GEO.dataset_path(dataset) + '.experiments').collect{|name|
      name = name.strip
      terms[name] = name.sub(/.*?: /,'').sub(/\[ratio\]/,'').words.uniq
    }
    terms
  }
end


task 'annotate_UMLS' do
  require 'MARQ/annotations'
  require 'rbbt/util/misc'
  annotations('UMLS'){|dataset|
    terms = {}
    description = Open.read(GEO.dataset_path(dataset) + '.description')
    terms[:dataset] = Annotations::UMLS::OBA(description).uniq
    Open.read(GEO.dataset_path(dataset) + '.experiments').collect{|name|
      name = name.strip
      terms[name] = Annotations::UMLS::OBA(name.sub(/.*?: /,'').sub(/\[ratio\]/,'')).uniq
    }
    terms
  }
end


task 'annotate_Polysearch' do
  require 'MARQ/annotations'
  require 'rbbt/util/misc'
  require 'rbbt/sources/polysearch'
  annotations('Polysearch'){|dataset|
    terms = {}
    description = Open.read(GEO.dataset_path(dataset) + '.description')
    terms[:dataset] = Polysearch::match(description).values.flatten.sort.collect{|n| n.gsub(/\s+/,' ').downcase}.uniq
    Open.read(GEO.dataset_path(dataset) + '.experiments').collect{|name|
      name = name.strip
      terms[name] = Polysearch::match(name.sub(/.*?: /,'').sub(/\[ratio\]/,'')).values.flatten.sort.collect{|n| n.gsub(/\s+/,' ').downcase}.uniq
    }
    terms
  }

end

task 'annotate_GO' do
  require 'MARQ/annotations'
  require 'rbbt/sources/go'
  options = { :cut_off => $expr_threshold, :fdr => $fdr, :folds => $folds, :do_folds => $do_folds, :nth_genes => $nth_genes}
  annotations('GO_up', true){|dataset|
    org = MARQ.platform_organism(dataset)
    genes = Annotations::GO.get_genes(dataset, options)

    up = {}
    genes[:up] ||= []
    genes[:up].collect{|experiment,list|
      up[experiment] =  goterms(org, list, false, $expr_threshold)
    }
    up
  }

  annotations('GO_down', true){|dataset|
    org = MARQ.platform_organism(dataset)
    genes = Annotations::GO.get_genes(dataset, options)

    down = {}
    genes[:down] ||= []
    genes[:down].collect{|experiment,list|
      down[experiment] = goterms(org, list, false, $expr_threshold)
    }
    down
  } 
  annotations('GOSlim_up', true){|dataset|
    org = MARQ.platform_organism(dataset)
    genes = Annotations::GO.get_genes(dataset, options)

    up = {}
    genes[:up] ||= []
    genes[:up].collect{|experiment,list|
      up[experiment] = goterms(org, list, true, $expr_threshold)
    }
    up
  }

  annotations('GOSlim_down', true){|dataset|
    org = MARQ.platform_organism(dataset)
    genes = Annotations::GO.get_genes(dataset, options)

    down = {}
    genes[:down] ||= []
    genes[:down].collect{|experiment,list|
      down[experiment] =  goterms(org, list, true, $expr_threshold)
    }
    down
  }
end

task 'default' do
  Rake::Task['data'].invoke
  Rake::Task['annotate_Words'].invoke
  Rake::Task['annotate_UMLS'].invoke
  Rake::Task['annotate_Polysearch'].invoke
  Rake::Task['annotate_GO'].invoke
end
