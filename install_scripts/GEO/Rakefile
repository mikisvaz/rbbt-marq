require 'MARQ'
require 'MARQ/main'
require 'MARQ/GEO'
require 'MARQ/ID'
require 'yaml'
require 'progress-monitor'
require 'MARQ/MADB'
require 'rbbt/sources/organism'
require File.join(File.dirname(File.dirname(__FILE__)), 'rake_includes')


$platform       ||= ENV['platform']
$organism       ||= [$organism, ENV['organism'], nil].compact.first 
$dataset        ||= ENV['dataset']

# More global variables in rake_includes file

# Record changes in order to update DB

def process_list
  list = {}
  organisms = $organism ? [$organism] : Organism.all(true)

  # Find candidate datasets
  case
  when $dataset
    list[GEO::Remote::dataset_platform($dataset)] = [$dataset]
  when $platform
    list[$platform] = GEO::Remote::platform_datasets($platform)
  else
    organisms.each do |organism|
      org_platform = GEO::Remote::organism_platforms(organism)
      org_platform.each do |platform|
        datasets = GEO::Remote::platform_datasets(platform)
        list[platform] = datasets if datasets.any?
      end
    end
  end
  
  # Find cadidate series
  case
  when $dataset 
  when $series
    series = Dir.glob('series/*.yaml').collect{|f| File.basename(f).sub(/.yaml/,'')}               
    series.each do |serie|
      platform = GEO::SOFT.GSE(serie)[:platform]
      next if $platform && $platform != platform
      begin
        if platform =~ /_/
          organism = GEO::SOFT.GPL(platform)[:organism]
        else
          organism =  GEO::Remote::platform_organism(platform)
        end
        if organism.split(',').select{|org| organisms.include? Organism.name2org(org.strip)}.any?
          list[platform] ||= []
          list[platform] << serie 
        end
      rescue
        puts "Error process series #{serie} platform #{platform}"
        puts $!.message
        puts $!.backtrace.join("\n")
      end
    end
  end

  return list
end

